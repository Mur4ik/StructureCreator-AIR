package com.structurecreator{	import com.structurecreator.files.MicrosoftX;	import com.structurecreator.files.FileTypes;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.LoaderInfo;	//import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLStream;	//import flash.text.TextField;	//import fl.controls.TextArea;	import flash.utils.ByteArray;	//import flash.utils.Endian;	/**	 * ...	 * @author Ed Moore	 */	public class FileCreate	{		private var _dir:String;		private var _url:String;		private var _name:String;		private var _fileContent:String;		private var _byteContent:ByteArray;				private var _loader:URLStream;		private var _urlLoader:URLLoader;		private var _fileExtension:String;				public function FileCreate(dir:String, name:String = '', url:String = '', fileContent:String = ''/*, quality:uint = 80*/) 		{			_dir = dir;			_url = url;						_name = name;			_fileContent = fileContent;						_fileExtension = (_name.split('.')[1] as String).toLowerCase();						//CaptainsLog.getInstance().addToLog("File name: " + _name + " : " + _file_ext);						if (_url == '')			{				//Text file from content in XML				createTextFile();			}			else if (FileTypes.nonTextExtArray.indexOf(_fileExtension) > -1)			{				loadByteFile();			} 			else			{				//Text file from URL				loadTextFileContent();			}						}				private function loadByteFile():void		{			_loader = new URLStream();			_byteContent = new ByteArray();			//_byte_content.endian = Endian.BIG_ENDIAN;			_loader.addEventListener(Event.COMPLETE, byteFileLoaded);			_loader.addEventListener(IOErrorEvent.IO_ERROR, byteFileIOError);			_loader.load(new URLRequest(_url));		}				private function byteFileIOError(e:IOErrorEvent):void 		{			//CaptainsLog.getInstance().addToLog("CANNOT LOAD " + _name);			trace("Cannot load " + _name);		}				private function byteFileLoaded(e:Event):void 		{			_loader.removeEventListener(Event.COMPLETE, byteFileLoaded);			_loader.removeEventListener(IOErrorEvent.IO_ERROR, byteFileIOError);			//CaptainsLog.getInstance().addToLog("File contents LOADED for " + _name);						_loader.readBytes(_byteContent, 0, _loader.bytesAvailable);			createByteFile();		}				private function createByteFile():void		{			var file:File = new File();			file.url = _dir;			file = file.resolvePath(_name);						trace('the file ext : ' + _fileExtension);			switch (_fileExtension) 			{				case 'docx':				case 'pptx':				case 'xlsx':					//trace("WRITE A MICROSOFT FILE : " + _file_ext);					new MicrosoftX(file, _byteContent);				break;								default:					var fs:FileStream = new FileStream();					fs.open(file, FileMode.WRITE);					fs.writeBytes(_byteContent);					fs.close();				break;			}		}				/**		 * Text Based File		 */		private function loadTextFileContent():void		{			//CaptainsLog.getInstance().addToLog("Load file contents for " + _name);			_urlLoader = new URLLoader();			_urlLoader.addEventListener(Event.COMPLETE, textFileLoaded);			_urlLoader.load(new URLRequest(_url));		}				private function textFileLoaded(e:Event):void		{			_urlLoader.removeEventListener(Event.COMPLETE, textFileLoaded);			//CaptainsLog.getInstance().addToLog("File contents LOADED for " + _name);			_fileContent = e.currentTarget.data as String;			createTextFile();		}				private function createTextFile():void		{			_fileContent = CustomVars.getInstance().addVariables(_fileContent);						var file:File = new File();			file.url = _dir;			file = file.resolvePath(_name);						var fs:FileStream = new FileStream();			fs.open(file, FileMode.WRITE);			fs.writeUTFBytes(_fileContent);			fs.close();		}			}}